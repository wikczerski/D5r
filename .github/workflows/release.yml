name: Release

on:
  push:
    tags:
      - 'v*'

env:
  BINARY_NAME: d5r
  VERSION: ${{ github.ref_name }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.0'

    - name: Build for all platforms
      run: |
        echo "=== CI Environment Debug ==="
        echo "OS: $OS"
        echo "RUNNER_OS: $RUNNER_OS"
        echo "Current directory: $(pwd)"
        echo "Directory permissions:"
        ls -la
        echo "Make version:"
        make --version
        echo "==========================="
        
        make build-all
        
        echo "Build completed. Checking binaries:"
        ls -la dist/
        echo "Verifying all expected binaries exist:"
        for arch in amd64 arm64 armv7 ppc64le s390x; do
          if [ -f "dist/d5r-linux-$arch" ]; then
            echo "✓ d5r-linux-$arch exists"
          else
            echo "✗ d5r-linux-$arch MISSING"
          fi
        done
        
    - name: Create packages
      run: |
        make build-packages
        
    - name: Generate checksums
      run: |
        make checksums
        
    - name: List artifacts
      run: |
        ls -la dist/
        ls -la dist/packages/
        cat dist/checksums.sha256

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  package-linux:
    name: Package Linux
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        arch: [amd64, arm64, armv7, ppc64le, s390x]
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Create Linux packages
      run: |
        cd dist
        echo "Available binaries in dist directory:"
        ls -la
        echo "Creating packages for architecture: ${{ matrix.arch }}"
        
        # Verify the binary exists before proceeding
        if [ ! -f "${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}" ]; then
          echo "ERROR: Binary ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }} not found!"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        # Create tar.gz packages
        tar -czf packages/${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}.tar.gz ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}
        
        # Create package files for supported architectures
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          echo "Creating packages for amd64 architecture..."
          
          # Create .deb package
          mkdir -p deb/DEBIAN
          echo "Package: ${{ env.BINARY_NAME }}" > deb/DEBIAN/control
          echo "Version: ${VERSION#v}" >> deb/DEBIAN/control
          echo "Architecture: amd64" >> deb/DEBIAN/control
          echo "Maintainer: Your Name <your.email@example.com>" >> deb/DEBIAN/control
          echo "Description: Docker management tool" >> deb/DEBIAN/control
          
          mkdir -p deb/usr/local/bin
          cp ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }} deb/usr/local/bin/${{ env.BINARY_NAME }}
          chmod +x deb/usr/local/bin/${{ env.BINARY_NAME }}
          
          dpkg-deb --build deb packages/${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}.deb
          rm -rf deb
          
          # Create .rpm package
          echo "Creating RPM package for amd64..."
          echo "Binary path: ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}"
          echo "Current directory: $(pwd)"
          echo "Binary exists: $(ls -la ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }})"
          
          mkdir -p rpm/BUILD rpm/BUILDROOT rpm/RPMS rpm/SOURCES rpm/SPECS
          echo "Name: ${{ env.BINARY_NAME }}" > rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "Version: ${VERSION#v}" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "Release: 1" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "Summary: Docker management tool" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "License: MIT" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "BuildArch: x86_64" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "%description" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "Docker management tool" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "%files" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "/usr/local/bin/${{ env.BINARY_NAME }}" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "%install" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "mkdir -p %{buildroot}/usr/local/bin" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "cp ../../${{ env.BINARY_NAME }}-linux-${{ matrix.arch }} %{buildroot}/usr/local/bin/${{ env.BINARY_NAME }}" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          echo "chmod +x %{buildroot}/usr/local/bin/${{ env.BINARY_NAME }}" >> rpm/SPECS/${{ env.BINARY_NAME }}.spec
          
          echo "RPM spec file created:"
          cat rpm/SPECS/${{ env.BINARY_NAME }}.spec
          
          rpmbuild --define "_topdir $(pwd)/rpm" -bb rpm/SPECS/${{ env.BINARY_NAME }}.spec
          cp rpm/RPMS/x86_64/*.rpm packages/
          rm -rf rpm
          
          # Create .apk package
          echo "Creating APK package for amd64..."
          mkdir -p apk/apk
          echo "${{ env.BINARY_NAME }}" > apk/apk/installed
          echo "${VERSION#v}" >> apk/apk/installed
          echo "x86_64" >> apk/apk/installed
          echo "" >> apk/apk/installed
          echo "C" >> apk/apk/installed
          
          mkdir -p apk/usr/local/bin
          cp ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }} apk/usr/local/bin/${{ env.BINARY_NAME }}
          chmod +x apk/usr/local/bin/${{ env.BINARY_NAME }}
          
          tar -czf packages/${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}.apk -C apk .
          rm -rf apk
          
          echo "All packages created successfully for amd64"
        else
          echo "Skipping package creation for ${{ matrix.arch }} architecture (only tar.gz created)"
        fi

    - name: Upload Linux packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages-${{ matrix.arch }}
        path: dist/packages/

  package-darwin:
    name: Package Darwin
    runs-on: macos-latest
    needs: build
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Create Darwin packages
      run: |
        cd dist
        tar -czf packages/${{ env.BINARY_NAME }}-darwin-${{ matrix.arch }}.tar.gz ${{ env.BINARY_NAME }}-darwin-${{ matrix.arch }}

    - name: Upload Darwin packages
      uses: actions/upload-artifact@v4
      with:
        name: darwin-packages-${{ matrix.arch }}
        path: dist/packages/

  package-freebsd:
    name: Package FreeBSD
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Create FreeBSD packages
      run: |
        cd dist
        tar -czf packages/${{ env.BINARY_NAME }}-freebsd-${{ matrix.arch }}.tar.gz ${{ env.BINARY_NAME }}-freebsd-${{ matrix.arch }}

    - name: Upload FreeBSD packages
      uses: actions/upload-artifact@v4
      with:
        name: freebsd-packages-${{ matrix.arch }}
        path: dist/packages/

  package-windows:
    name: Package Windows
    runs-on: windows-latest
    needs: build
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Create Windows packages
      shell: powershell
      run: |
        cd dist
        Compress-Archive -Path "${{ env.BINARY_NAME }}-windows-${{ matrix.arch }}.exe" -DestinationPath "packages/${{ env.BINARY_NAME }}-windows-${{ matrix.arch }}.zip" -Force

    - name: Upload Windows packages
      uses: actions/upload-artifact@v4
      with:
        name: windows-packages-${{ matrix.arch }}
        path: dist/packages/

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [package-linux, package-darwin, package-freebsd, package-windows]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release files
      run: |
        mkdir -p release
        # Copy all packages
        find . -name "*.tar.gz" -exec cp {} release/ \;
        find . -name "*.zip" -exec cp {} release/ \;
        find . -name "*.deb" -exec cp {} release/ \;
        find . -name "*.rpm" -exec cp {} release/ \;
        find . -name "*.apk" -exec cp {} release/ \;
        
        # Copy checksums
        find . -name "checksums.sha256" -exec cp {} release/ \;
        
        # Generate SBOM files (placeholder - you can integrate with actual SBOM tools)
        for file in release/*.tar.gz release/*.zip release/*.deb release/*.rpm release/*.apk; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo '{"bomFormat": "CycloneDX", "specVersion": "1.4", "version": 1, "metadata": {"timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "tools": [{"vendor": "Your Company", "name": "SBOM Generator", "version": "1.0.0"}]}, "components": []}' > "release/${filename}.sbom.json"
          fi
        done
        
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
