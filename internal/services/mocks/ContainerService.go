// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/D5r/internal/models"
)

// NewMockContainerService creates a new instance of MockContainerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainerService {
	mock := &MockContainerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContainerService is an autogenerated mock type for the ContainerService type
type MockContainerService struct {
	mock.Mock
}

type MockContainerService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainerService) EXPECT() *MockContainerService_Expecter {
	return &MockContainerService_Expecter{mock: &_m.Mock}
}

// AttachContainer provides a mock function for the type MockContainerService
func (_mock *MockContainerService) AttachContainer(ctx context.Context, id string) (any, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AttachContainer")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (any, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) any); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerService_AttachContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachContainer'
type MockContainerService_AttachContainer_Call struct {
	*mock.Call
}

// AttachContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockContainerService_Expecter) AttachContainer(ctx interface{}, id interface{}) *MockContainerService_AttachContainer_Call {
	return &MockContainerService_AttachContainer_Call{Call: _e.mock.On("AttachContainer", ctx, id)}
}

func (_c *MockContainerService_AttachContainer_Call) Run(run func(ctx context.Context, id string)) *MockContainerService_AttachContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerService_AttachContainer_Call) Return(v any, err error) *MockContainerService_AttachContainer_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockContainerService_AttachContainer_Call) RunAndReturn(run func(ctx context.Context, id string) (any, error)) *MockContainerService_AttachContainer_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContainer provides a mock function for the type MockContainerService
func (_mock *MockContainerService) ExecContainer(ctx context.Context, id string, command []string, tty bool) (string, error) {
	ret := _mock.Called(ctx, id, command, tty)

	if len(ret) == 0 {
		panic("no return value specified for ExecContainer")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, bool) (string, error)); ok {
		return returnFunc(ctx, id, command, tty)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, bool) string); ok {
		r0 = returnFunc(ctx, id, command, tty)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string, bool) error); ok {
		r1 = returnFunc(ctx, id, command, tty)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerService_ExecContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContainer'
type MockContainerService_ExecContainer_Call struct {
	*mock.Call
}

// ExecContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - command []string
//   - tty bool
func (_e *MockContainerService_Expecter) ExecContainer(ctx interface{}, id interface{}, command interface{}, tty interface{}) *MockContainerService_ExecContainer_Call {
	return &MockContainerService_ExecContainer_Call{Call: _e.mock.On("ExecContainer", ctx, id, command, tty)}
}

func (_c *MockContainerService_ExecContainer_Call) Run(run func(ctx context.Context, id string, command []string, tty bool)) *MockContainerService_ExecContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockContainerService_ExecContainer_Call) Return(s string, err error) *MockContainerService_ExecContainer_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockContainerService_ExecContainer_Call) RunAndReturn(run func(ctx context.Context, id string, command []string, tty bool) (string, error)) *MockContainerService_ExecContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetActions provides a mock function for the type MockContainerService
func (_mock *MockContainerService) GetActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockContainerService_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type MockContainerService_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
func (_e *MockContainerService_Expecter) GetActions() *MockContainerService_GetActions_Call {
	return &MockContainerService_GetActions_Call{Call: _e.mock.On("GetActions")}
}

func (_c *MockContainerService_GetActions_Call) Run(run func()) *MockContainerService_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainerService_GetActions_Call) Return(runeToString map[rune]string) *MockContainerService_GetActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockContainerService_GetActions_Call) RunAndReturn(run func() map[rune]string) *MockContainerService_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionsString provides a mock function for the type MockContainerService
func (_mock *MockContainerService) GetActionsString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActionsString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockContainerService_GetActionsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionsString'
type MockContainerService_GetActionsString_Call struct {
	*mock.Call
}

// GetActionsString is a helper method to define mock.On call
func (_e *MockContainerService_Expecter) GetActionsString() *MockContainerService_GetActionsString_Call {
	return &MockContainerService_GetActionsString_Call{Call: _e.mock.On("GetActionsString")}
}

func (_c *MockContainerService_GetActionsString_Call) Run(run func()) *MockContainerService_GetActionsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainerService_GetActionsString_Call) Return(s string) *MockContainerService_GetActionsString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockContainerService_GetActionsString_Call) RunAndReturn(run func() string) *MockContainerService_GetActionsString_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainerLogs provides a mock function for the type MockContainerService
func (_mock *MockContainerService) GetContainerLogs(ctx context.Context, id string) (string, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerLogs")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerService_GetContainerLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerLogs'
type MockContainerService_GetContainerLogs_Call struct {
	*mock.Call
}

// GetContainerLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockContainerService_Expecter) GetContainerLogs(ctx interface{}, id interface{}) *MockContainerService_GetContainerLogs_Call {
	return &MockContainerService_GetContainerLogs_Call{Call: _e.mock.On("GetContainerLogs", ctx, id)}
}

func (_c *MockContainerService_GetContainerLogs_Call) Run(run func(ctx context.Context, id string)) *MockContainerService_GetContainerLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerService_GetContainerLogs_Call) Return(s string, err error) *MockContainerService_GetContainerLogs_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockContainerService_GetContainerLogs_Call) RunAndReturn(run func(ctx context.Context, id string) (string, error)) *MockContainerService_GetContainerLogs_Call {
	_c.Call.Return(run)
	return _c
}

// InspectContainer provides a mock function for the type MockContainerService
func (_mock *MockContainerService) InspectContainer(ctx context.Context, id string) (map[string]any, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for InspectContainer")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]any, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]any); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerService_InspectContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InspectContainer'
type MockContainerService_InspectContainer_Call struct {
	*mock.Call
}

// InspectContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockContainerService_Expecter) InspectContainer(ctx interface{}, id interface{}) *MockContainerService_InspectContainer_Call {
	return &MockContainerService_InspectContainer_Call{Call: _e.mock.On("InspectContainer", ctx, id)}
}

func (_c *MockContainerService_InspectContainer_Call) Run(run func(ctx context.Context, id string)) *MockContainerService_InspectContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerService_InspectContainer_Call) Return(stringToV map[string]any, err error) *MockContainerService_InspectContainer_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockContainerService_InspectContainer_Call) RunAndReturn(run func(ctx context.Context, id string) (map[string]any, error)) *MockContainerService_InspectContainer_Call {
	_c.Call.Return(run)
	return _c
}

// ListContainers provides a mock function for the type MockContainerService
func (_mock *MockContainerService) ListContainers(ctx context.Context) ([]models.Container, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListContainers")
	}

	var r0 []models.Container
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Container, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Container); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Container)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerService_ListContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContainers'
type MockContainerService_ListContainers_Call struct {
	*mock.Call
}

// ListContainers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockContainerService_Expecter) ListContainers(ctx interface{}) *MockContainerService_ListContainers_Call {
	return &MockContainerService_ListContainers_Call{Call: _e.mock.On("ListContainers", ctx)}
}

func (_c *MockContainerService_ListContainers_Call) Run(run func(ctx context.Context)) *MockContainerService_ListContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockContainerService_ListContainers_Call) Return(vs []models.Container, err error) *MockContainerService_ListContainers_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockContainerService_ListContainers_Call) RunAndReturn(run func(ctx context.Context) ([]models.Container, error)) *MockContainerService_ListContainers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContainer provides a mock function for the type MockContainerService
func (_mock *MockContainerService) RemoveContainer(ctx context.Context, id string, force bool) error {
	ret := _mock.Called(ctx, id, force)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctx, id, force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerService_RemoveContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContainer'
type MockContainerService_RemoveContainer_Call struct {
	*mock.Call
}

// RemoveContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - force bool
func (_e *MockContainerService_Expecter) RemoveContainer(ctx interface{}, id interface{}, force interface{}) *MockContainerService_RemoveContainer_Call {
	return &MockContainerService_RemoveContainer_Call{Call: _e.mock.On("RemoveContainer", ctx, id, force)}
}

func (_c *MockContainerService_RemoveContainer_Call) Run(run func(ctx context.Context, id string, force bool)) *MockContainerService_RemoveContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerService_RemoveContainer_Call) Return(err error) *MockContainerService_RemoveContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerService_RemoveContainer_Call) RunAndReturn(run func(ctx context.Context, id string, force bool) error) *MockContainerService_RemoveContainer_Call {
	_c.Call.Return(run)
	return _c
}

// RestartContainer provides a mock function for the type MockContainerService
func (_mock *MockContainerService) RestartContainer(ctx context.Context, id string, timeout *time.Duration) error {
	ret := _mock.Called(ctx, id, timeout)

	if len(ret) == 0 {
		panic("no return value specified for RestartContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *time.Duration) error); ok {
		r0 = returnFunc(ctx, id, timeout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerService_RestartContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartContainer'
type MockContainerService_RestartContainer_Call struct {
	*mock.Call
}

// RestartContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - timeout *time.Duration
func (_e *MockContainerService_Expecter) RestartContainer(ctx interface{}, id interface{}, timeout interface{}) *MockContainerService_RestartContainer_Call {
	return &MockContainerService_RestartContainer_Call{Call: _e.mock.On("RestartContainer", ctx, id, timeout)}
}

func (_c *MockContainerService_RestartContainer_Call) Run(run func(ctx context.Context, id string, timeout *time.Duration)) *MockContainerService_RestartContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *time.Duration
		if args[2] != nil {
			arg2 = args[2].(*time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerService_RestartContainer_Call) Return(err error) *MockContainerService_RestartContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerService_RestartContainer_Call) RunAndReturn(run func(ctx context.Context, id string, timeout *time.Duration) error) *MockContainerService_RestartContainer_Call {
	_c.Call.Return(run)
	return _c
}

// StartContainer provides a mock function for the type MockContainerService
func (_mock *MockContainerService) StartContainer(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for StartContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerService_StartContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartContainer'
type MockContainerService_StartContainer_Call struct {
	*mock.Call
}

// StartContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockContainerService_Expecter) StartContainer(ctx interface{}, id interface{}) *MockContainerService_StartContainer_Call {
	return &MockContainerService_StartContainer_Call{Call: _e.mock.On("StartContainer", ctx, id)}
}

func (_c *MockContainerService_StartContainer_Call) Run(run func(ctx context.Context, id string)) *MockContainerService_StartContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerService_StartContainer_Call) Return(err error) *MockContainerService_StartContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerService_StartContainer_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockContainerService_StartContainer_Call {
	_c.Call.Return(run)
	return _c
}

// StopContainer provides a mock function for the type MockContainerService
func (_mock *MockContainerService) StopContainer(ctx context.Context, id string, timeout *time.Duration) error {
	ret := _mock.Called(ctx, id, timeout)

	if len(ret) == 0 {
		panic("no return value specified for StopContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *time.Duration) error); ok {
		r0 = returnFunc(ctx, id, timeout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerService_StopContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopContainer'
type MockContainerService_StopContainer_Call struct {
	*mock.Call
}

// StopContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - timeout *time.Duration
func (_e *MockContainerService_Expecter) StopContainer(ctx interface{}, id interface{}, timeout interface{}) *MockContainerService_StopContainer_Call {
	return &MockContainerService_StopContainer_Call{Call: _e.mock.On("StopContainer", ctx, id, timeout)}
}

func (_c *MockContainerService_StopContainer_Call) Run(run func(ctx context.Context, id string, timeout *time.Duration)) *MockContainerService_StopContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *time.Duration
		if args[2] != nil {
			arg2 = args[2].(*time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerService_StopContainer_Call) Return(err error) *MockContainerService_StopContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerService_StopContainer_Call) RunAndReturn(run func(ctx context.Context, id string, timeout *time.Duration) error) *MockContainerService_StopContainer_Call {
	_c.Call.Return(run)
	return _c
}
