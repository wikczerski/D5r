// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLogsService creates a new instance of MockLogsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogsService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockLogsService {
	mock := &MockLogsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogsService is an autogenerated mock type for the LogsService type
type MockLogsService struct {
	mock.Mock
}

type MockLogsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogsService) EXPECT() *MockLogsService_Expecter {
	return &MockLogsService_Expecter{mock: &_m.Mock}
}

// GetActions provides a mock function for the type MockLogsService
func (_mock *MockLogsService) GetActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockLogsService_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type MockLogsService_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
func (_e *MockLogsService_Expecter) GetActions() *MockLogsService_GetActions_Call {
	return &MockLogsService_GetActions_Call{Call: _e.mock.On("GetActions")}
}

func (_c *MockLogsService_GetActions_Call) Run(run func()) *MockLogsService_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogsService_GetActions_Call) Return(runeToString map[rune]string) *MockLogsService_GetActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockLogsService_GetActions_Call) RunAndReturn(run func() map[rune]string) *MockLogsService_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionsString provides a mock function for the type MockLogsService
func (_mock *MockLogsService) GetActionsString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActionsString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockLogsService_GetActionsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionsString'
type MockLogsService_GetActionsString_Call struct {
	*mock.Call
}

// GetActionsString is a helper method to define mock.On call
func (_e *MockLogsService_Expecter) GetActionsString() *MockLogsService_GetActionsString_Call {
	return &MockLogsService_GetActionsString_Call{Call: _e.mock.On("GetActionsString")}
}

func (_c *MockLogsService_GetActionsString_Call) Run(run func()) *MockLogsService_GetActionsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogsService_GetActionsString_Call) Return(s string) *MockLogsService_GetActionsString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockLogsService_GetActionsString_Call) RunAndReturn(run func() string) *MockLogsService_GetActionsString_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function for the type MockLogsService
func (_mock *MockLogsService) GetLogs(ctx context.Context, resourceType string, resourceID string) (string, error) {
	ret := _mock.Called(ctx, resourceType, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, resourceType, resourceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, resourceType, resourceID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, resourceType, resourceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogsService_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockLogsService_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType string
//   - resourceID string
func (_e *MockLogsService_Expecter) GetLogs(ctx interface{}, resourceType interface{}, resourceID interface{}) *MockLogsService_GetLogs_Call {
	return &MockLogsService_GetLogs_Call{Call: _e.mock.On("GetLogs", ctx, resourceType, resourceID)}
}

func (_c *MockLogsService_GetLogs_Call) Run(run func(ctx context.Context, resourceType string, resourceID string)) *MockLogsService_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLogsService_GetLogs_Call) Return(s string, err error) *MockLogsService_GetLogs_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockLogsService_GetLogs_Call) RunAndReturn(run func(ctx context.Context, resourceType string, resourceID string) (string, error)) *MockLogsService_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}
