// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/whaletui/internal/shared"
)

// NewMockSwarmServiceService creates a new instance of MockSwarmServiceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwarmServiceService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSwarmServiceService {
	mock := &MockSwarmServiceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSwarmServiceService is an autogenerated mock type for the SwarmServiceService type
type MockSwarmServiceService struct {
	mock.Mock
}

type MockSwarmServiceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwarmServiceService) EXPECT() *MockSwarmServiceService_Expecter {
	return &MockSwarmServiceService_Expecter{mock: &_m.Mock}
}

// GetActions provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) GetActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockSwarmServiceService_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type MockSwarmServiceService_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
func (_e *MockSwarmServiceService_Expecter) GetActions() *MockSwarmServiceService_GetActions_Call {
	return &MockSwarmServiceService_GetActions_Call{Call: _e.mock.On("GetActions")}
}

func (_c *MockSwarmServiceService_GetActions_Call) Run(run func()) *MockSwarmServiceService_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSwarmServiceService_GetActions_Call) Return(runeToString map[rune]string) *MockSwarmServiceService_GetActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockSwarmServiceService_GetActions_Call) RunAndReturn(run func() map[rune]string) *MockSwarmServiceService_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionsString provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) GetActionsString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActionsString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSwarmServiceService_GetActionsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionsString'
type MockSwarmServiceService_GetActionsString_Call struct {
	*mock.Call
}

// GetActionsString is a helper method to define mock.On call
func (_e *MockSwarmServiceService_Expecter) GetActionsString() *MockSwarmServiceService_GetActionsString_Call {
	return &MockSwarmServiceService_GetActionsString_Call{Call: _e.mock.On("GetActionsString")}
}

func (_c *MockSwarmServiceService_GetActionsString_Call) Run(run func()) *MockSwarmServiceService_GetActionsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSwarmServiceService_GetActionsString_Call) Return(s string) *MockSwarmServiceService_GetActionsString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSwarmServiceService_GetActionsString_Call) RunAndReturn(run func() string) *MockSwarmServiceService_GetActionsString_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLogs provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) GetServiceLogs(ctx context.Context, id string) (string, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceLogs")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSwarmServiceService_GetServiceLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLogs'
type MockSwarmServiceService_GetServiceLogs_Call struct {
	*mock.Call
}

// GetServiceLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSwarmServiceService_Expecter) GetServiceLogs(ctx interface{}, id interface{}) *MockSwarmServiceService_GetServiceLogs_Call {
	return &MockSwarmServiceService_GetServiceLogs_Call{Call: _e.mock.On("GetServiceLogs", ctx, id)}
}

func (_c *MockSwarmServiceService_GetServiceLogs_Call) Run(run func(ctx context.Context, id string)) *MockSwarmServiceService_GetServiceLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSwarmServiceService_GetServiceLogs_Call) Return(s string, err error) *MockSwarmServiceService_GetServiceLogs_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSwarmServiceService_GetServiceLogs_Call) RunAndReturn(run func(ctx context.Context, id string) (string, error)) *MockSwarmServiceService_GetServiceLogs_Call {
	_c.Call.Return(run)
	return _c
}

// InspectService provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) InspectService(ctx context.Context, id string) (map[string]any, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for InspectService")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]any, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]any); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSwarmServiceService_InspectService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InspectService'
type MockSwarmServiceService_InspectService_Call struct {
	*mock.Call
}

// InspectService is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSwarmServiceService_Expecter) InspectService(ctx interface{}, id interface{}) *MockSwarmServiceService_InspectService_Call {
	return &MockSwarmServiceService_InspectService_Call{Call: _e.mock.On("InspectService", ctx, id)}
}

func (_c *MockSwarmServiceService_InspectService_Call) Run(run func(ctx context.Context, id string)) *MockSwarmServiceService_InspectService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSwarmServiceService_InspectService_Call) Return(stringToV map[string]any, err error) *MockSwarmServiceService_InspectService_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockSwarmServiceService_InspectService_Call) RunAndReturn(run func(ctx context.Context, id string) (map[string]any, error)) *MockSwarmServiceService_InspectService_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) ListServices(ctx context.Context) ([]shared.SwarmService, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 []shared.SwarmService
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]shared.SwarmService, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []shared.SwarmService); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.SwarmService)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSwarmServiceService_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type MockSwarmServiceService_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSwarmServiceService_Expecter) ListServices(ctx interface{}) *MockSwarmServiceService_ListServices_Call {
	return &MockSwarmServiceService_ListServices_Call{Call: _e.mock.On("ListServices", ctx)}
}

func (_c *MockSwarmServiceService_ListServices_Call) Run(run func(ctx context.Context)) *MockSwarmServiceService_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSwarmServiceService_ListServices_Call) Return(swarmServices []shared.SwarmService, err error) *MockSwarmServiceService_ListServices_Call {
	_c.Call.Return(swarmServices, err)
	return _c
}

func (_c *MockSwarmServiceService_ListServices_Call) RunAndReturn(run func(ctx context.Context) ([]shared.SwarmService, error)) *MockSwarmServiceService_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveService provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) RemoveService(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSwarmServiceService_RemoveService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveService'
type MockSwarmServiceService_RemoveService_Call struct {
	*mock.Call
}

// RemoveService is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSwarmServiceService_Expecter) RemoveService(ctx interface{}, id interface{}) *MockSwarmServiceService_RemoveService_Call {
	return &MockSwarmServiceService_RemoveService_Call{Call: _e.mock.On("RemoveService", ctx, id)}
}

func (_c *MockSwarmServiceService_RemoveService_Call) Run(run func(ctx context.Context, id string)) *MockSwarmServiceService_RemoveService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSwarmServiceService_RemoveService_Call) Return(err error) *MockSwarmServiceService_RemoveService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSwarmServiceService_RemoveService_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockSwarmServiceService_RemoveService_Call {
	_c.Call.Return(run)
	return _c
}

// ScaleService provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) ScaleService(ctx context.Context, id string, replicas uint64) error {
	ret := _mock.Called(ctx, id, replicas)

	if len(ret) == 0 {
		panic("no return value specified for ScaleService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = returnFunc(ctx, id, replicas)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSwarmServiceService_ScaleService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScaleService'
type MockSwarmServiceService_ScaleService_Call struct {
	*mock.Call
}

// ScaleService is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - replicas uint64
func (_e *MockSwarmServiceService_Expecter) ScaleService(ctx interface{}, id interface{}, replicas interface{}) *MockSwarmServiceService_ScaleService_Call {
	return &MockSwarmServiceService_ScaleService_Call{Call: _e.mock.On("ScaleService", ctx, id, replicas)}
}

func (_c *MockSwarmServiceService_ScaleService_Call) Run(run func(ctx context.Context, id string, replicas uint64)) *MockSwarmServiceService_ScaleService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSwarmServiceService_ScaleService_Call) Return(err error) *MockSwarmServiceService_ScaleService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSwarmServiceService_ScaleService_Call) RunAndReturn(run func(ctx context.Context, id string, replicas uint64) error) *MockSwarmServiceService_ScaleService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function for the type MockSwarmServiceService
func (_mock *MockSwarmServiceService) UpdateService(ctx context.Context, id string, spec any) error {
	ret := _mock.Called(ctx, id, spec)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) error); ok {
		r0 = returnFunc(ctx, id, spec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSwarmServiceService_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockSwarmServiceService_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - spec any
func (_e *MockSwarmServiceService_Expecter) UpdateService(ctx interface{}, id interface{}, spec interface{}) *MockSwarmServiceService_UpdateService_Call {
	return &MockSwarmServiceService_UpdateService_Call{Call: _e.mock.On("UpdateService", ctx, id, spec)}
}

func (_c *MockSwarmServiceService_UpdateService_Call) Run(run func(ctx context.Context, id string, spec any)) *MockSwarmServiceService_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSwarmServiceService_UpdateService_Call) Return(err error) *MockSwarmServiceService_UpdateService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSwarmServiceService_UpdateService_Call) RunAndReturn(run func(ctx context.Context, id string, spec any) error) *MockSwarmServiceService_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}
