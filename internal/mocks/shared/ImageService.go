// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/whaletui/internal/shared"
)

// NewMockImageService creates a new instance of MockImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockImageService {
	mock := &MockImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageService is an autogenerated mock type for the ImageService type
type MockImageService struct {
	mock.Mock
}

type MockImageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageService) EXPECT() *MockImageService_Expecter {
	return &MockImageService_Expecter{mock: &_m.Mock}
}

// GetActions provides a mock function for the type MockImageService
func (_mock *MockImageService) GetActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockImageService_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type MockImageService_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
func (_e *MockImageService_Expecter) GetActions() *MockImageService_GetActions_Call {
	return &MockImageService_GetActions_Call{Call: _e.mock.On("GetActions")}
}

func (_c *MockImageService_GetActions_Call) Run(run func()) *MockImageService_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImageService_GetActions_Call) Return(runeToString map[rune]string) *MockImageService_GetActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockImageService_GetActions_Call) RunAndReturn(run func() map[rune]string) *MockImageService_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionsString provides a mock function for the type MockImageService
func (_mock *MockImageService) GetActionsString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActionsString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockImageService_GetActionsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionsString'
type MockImageService_GetActionsString_Call struct {
	*mock.Call
}

// GetActionsString is a helper method to define mock.On call
func (_e *MockImageService_Expecter) GetActionsString() *MockImageService_GetActionsString_Call {
	return &MockImageService_GetActionsString_Call{Call: _e.mock.On("GetActionsString")}
}

func (_c *MockImageService_GetActionsString_Call) Run(run func()) *MockImageService_GetActionsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImageService_GetActionsString_Call) Return(s string) *MockImageService_GetActionsString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockImageService_GetActionsString_Call) RunAndReturn(run func() string) *MockImageService_GetActionsString_Call {
	_c.Call.Return(run)
	return _c
}

// InspectImage provides a mock function for the type MockImageService
func (_mock *MockImageService) InspectImage(ctx context.Context, id string) (map[string]any, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for InspectImage")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]any, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]any); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageService_InspectImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InspectImage'
type MockImageService_InspectImage_Call struct {
	*mock.Call
}

// InspectImage is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockImageService_Expecter) InspectImage(ctx interface{}, id interface{}) *MockImageService_InspectImage_Call {
	return &MockImageService_InspectImage_Call{Call: _e.mock.On("InspectImage", ctx, id)}
}

func (_c *MockImageService_InspectImage_Call) Run(run func(ctx context.Context, id string)) *MockImageService_InspectImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageService_InspectImage_Call) Return(stringToV map[string]any, err error) *MockImageService_InspectImage_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockImageService_InspectImage_Call) RunAndReturn(run func(ctx context.Context, id string) (map[string]any, error)) *MockImageService_InspectImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListImages provides a mock function for the type MockImageService
func (_mock *MockImageService) ListImages(ctx context.Context) ([]shared.Image, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 []shared.Image
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]shared.Image, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []shared.Image); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.Image)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageService_ListImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImages'
type MockImageService_ListImages_Call struct {
	*mock.Call
}

// ListImages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockImageService_Expecter) ListImages(ctx interface{}) *MockImageService_ListImages_Call {
	return &MockImageService_ListImages_Call{Call: _e.mock.On("ListImages", ctx)}
}

func (_c *MockImageService_ListImages_Call) Run(run func(ctx context.Context)) *MockImageService_ListImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockImageService_ListImages_Call) Return(vs []shared.Image, err error) *MockImageService_ListImages_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockImageService_ListImages_Call) RunAndReturn(run func(ctx context.Context) ([]shared.Image, error)) *MockImageService_ListImages_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveImage provides a mock function for the type MockImageService
func (_mock *MockImageService) RemoveImage(ctx context.Context, id string, force bool) error {
	ret := _mock.Called(ctx, id, force)

	if len(ret) == 0 {
		panic("no return value specified for RemoveImage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctx, id, force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageService_RemoveImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveImage'
type MockImageService_RemoveImage_Call struct {
	*mock.Call
}

// RemoveImage is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - force bool
func (_e *MockImageService_Expecter) RemoveImage(ctx interface{}, id interface{}, force interface{}) *MockImageService_RemoveImage_Call {
	return &MockImageService_RemoveImage_Call{Call: _e.mock.On("RemoveImage", ctx, id, force)}
}

func (_c *MockImageService_RemoveImage_Call) Run(run func(ctx context.Context, id string, force bool)) *MockImageService_RemoveImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockImageService_RemoveImage_Call) Return(err error) *MockImageService_RemoveImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageService_RemoveImage_Call) RunAndReturn(run func(ctx context.Context, id string, force bool) error) *MockImageService_RemoveImage_Call {
	_c.Call.Return(run)
	return _c
}
