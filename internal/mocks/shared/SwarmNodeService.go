// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/whaletui/internal/shared"
)

// NewMockSwarmNodeService creates a new instance of MockSwarmNodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwarmNodeService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSwarmNodeService {
	mock := &MockSwarmNodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSwarmNodeService is an autogenerated mock type for the SwarmNodeService type
type MockSwarmNodeService struct {
	mock.Mock
}

type MockSwarmNodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwarmNodeService) EXPECT() *MockSwarmNodeService_Expecter {
	return &MockSwarmNodeService_Expecter{mock: &_m.Mock}
}

// GetActions provides a mock function for the type MockSwarmNodeService
func (_mock *MockSwarmNodeService) GetActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockSwarmNodeService_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type MockSwarmNodeService_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
func (_e *MockSwarmNodeService_Expecter) GetActions() *MockSwarmNodeService_GetActions_Call {
	return &MockSwarmNodeService_GetActions_Call{Call: _e.mock.On("GetActions")}
}

func (_c *MockSwarmNodeService_GetActions_Call) Run(run func()) *MockSwarmNodeService_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSwarmNodeService_GetActions_Call) Return(runeToString map[rune]string) *MockSwarmNodeService_GetActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockSwarmNodeService_GetActions_Call) RunAndReturn(run func() map[rune]string) *MockSwarmNodeService_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionsString provides a mock function for the type MockSwarmNodeService
func (_mock *MockSwarmNodeService) GetActionsString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActionsString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSwarmNodeService_GetActionsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionsString'
type MockSwarmNodeService_GetActionsString_Call struct {
	*mock.Call
}

// GetActionsString is a helper method to define mock.On call
func (_e *MockSwarmNodeService_Expecter) GetActionsString() *MockSwarmNodeService_GetActionsString_Call {
	return &MockSwarmNodeService_GetActionsString_Call{Call: _e.mock.On("GetActionsString")}
}

func (_c *MockSwarmNodeService_GetActionsString_Call) Run(run func()) *MockSwarmNodeService_GetActionsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSwarmNodeService_GetActionsString_Call) Return(s string) *MockSwarmNodeService_GetActionsString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSwarmNodeService_GetActionsString_Call) RunAndReturn(run func() string) *MockSwarmNodeService_GetActionsString_Call {
	_c.Call.Return(run)
	return _c
}

// InspectNode provides a mock function for the type MockSwarmNodeService
func (_mock *MockSwarmNodeService) InspectNode(ctx context.Context, id string) (map[string]any, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for InspectNode")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]any, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]any); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSwarmNodeService_InspectNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InspectNode'
type MockSwarmNodeService_InspectNode_Call struct {
	*mock.Call
}

// InspectNode is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSwarmNodeService_Expecter) InspectNode(ctx interface{}, id interface{}) *MockSwarmNodeService_InspectNode_Call {
	return &MockSwarmNodeService_InspectNode_Call{Call: _e.mock.On("InspectNode", ctx, id)}
}

func (_c *MockSwarmNodeService_InspectNode_Call) Run(run func(ctx context.Context, id string)) *MockSwarmNodeService_InspectNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSwarmNodeService_InspectNode_Call) Return(stringToV map[string]any, err error) *MockSwarmNodeService_InspectNode_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockSwarmNodeService_InspectNode_Call) RunAndReturn(run func(ctx context.Context, id string) (map[string]any, error)) *MockSwarmNodeService_InspectNode_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function for the type MockSwarmNodeService
func (_mock *MockSwarmNodeService) ListNodes(ctx context.Context) ([]shared.SwarmNode, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []shared.SwarmNode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]shared.SwarmNode, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []shared.SwarmNode); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.SwarmNode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSwarmNodeService_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockSwarmNodeService_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSwarmNodeService_Expecter) ListNodes(ctx interface{}) *MockSwarmNodeService_ListNodes_Call {
	return &MockSwarmNodeService_ListNodes_Call{Call: _e.mock.On("ListNodes", ctx)}
}

func (_c *MockSwarmNodeService_ListNodes_Call) Run(run func(ctx context.Context)) *MockSwarmNodeService_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSwarmNodeService_ListNodes_Call) Return(swarmNodes []shared.SwarmNode, err error) *MockSwarmNodeService_ListNodes_Call {
	_c.Call.Return(swarmNodes, err)
	return _c
}

func (_c *MockSwarmNodeService_ListNodes_Call) RunAndReturn(run func(ctx context.Context) ([]shared.SwarmNode, error)) *MockSwarmNodeService_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNode provides a mock function for the type MockSwarmNodeService
func (_mock *MockSwarmNodeService) RemoveNode(ctx context.Context, id string, force bool) error {
	ret := _mock.Called(ctx, id, force)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctx, id, force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSwarmNodeService_RemoveNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNode'
type MockSwarmNodeService_RemoveNode_Call struct {
	*mock.Call
}

// RemoveNode is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - force bool
func (_e *MockSwarmNodeService_Expecter) RemoveNode(ctx interface{}, id interface{}, force interface{}) *MockSwarmNodeService_RemoveNode_Call {
	return &MockSwarmNodeService_RemoveNode_Call{Call: _e.mock.On("RemoveNode", ctx, id, force)}
}

func (_c *MockSwarmNodeService_RemoveNode_Call) Run(run func(ctx context.Context, id string, force bool)) *MockSwarmNodeService_RemoveNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSwarmNodeService_RemoveNode_Call) Return(err error) *MockSwarmNodeService_RemoveNode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSwarmNodeService_RemoveNode_Call) RunAndReturn(run func(ctx context.Context, id string, force bool) error) *MockSwarmNodeService_RemoveNode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNodeAvailability provides a mock function for the type MockSwarmNodeService
func (_mock *MockSwarmNodeService) UpdateNodeAvailability(ctx context.Context, id string, availability string) error {
	ret := _mock.Called(ctx, id, availability)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNodeAvailability")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, availability)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSwarmNodeService_UpdateNodeAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNodeAvailability'
type MockSwarmNodeService_UpdateNodeAvailability_Call struct {
	*mock.Call
}

// UpdateNodeAvailability is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - availability string
func (_e *MockSwarmNodeService_Expecter) UpdateNodeAvailability(ctx interface{}, id interface{}, availability interface{}) *MockSwarmNodeService_UpdateNodeAvailability_Call {
	return &MockSwarmNodeService_UpdateNodeAvailability_Call{Call: _e.mock.On("UpdateNodeAvailability", ctx, id, availability)}
}

func (_c *MockSwarmNodeService_UpdateNodeAvailability_Call) Run(run func(ctx context.Context, id string, availability string)) *MockSwarmNodeService_UpdateNodeAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSwarmNodeService_UpdateNodeAvailability_Call) Return(err error) *MockSwarmNodeService_UpdateNodeAvailability_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSwarmNodeService_UpdateNodeAvailability_Call) RunAndReturn(run func(ctx context.Context, id string, availability string) error) *MockSwarmNodeService_UpdateNodeAvailability_Call {
	_c.Call.Return(run)
	return _c
}
