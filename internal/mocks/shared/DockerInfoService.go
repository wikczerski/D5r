// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/whaletui/internal/shared"
)

// NewMockDockerInfoService creates a new instance of MockDockerInfoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDockerInfoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDockerInfoService {
	mock := &MockDockerInfoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDockerInfoService is an autogenerated mock type for the DockerInfoService type
type MockDockerInfoService struct {
	mock.Mock
}

type MockDockerInfoService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDockerInfoService) EXPECT() *MockDockerInfoService_Expecter {
	return &MockDockerInfoService_Expecter{mock: &_m.Mock}
}

// GetDockerInfo provides a mock function for the type MockDockerInfoService
func (_mock *MockDockerInfoService) GetDockerInfo(ctx context.Context) (*shared.DockerInfo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDockerInfo")
	}

	var r0 *shared.DockerInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*shared.DockerInfo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *shared.DockerInfo); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.DockerInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerInfoService_GetDockerInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDockerInfo'
type MockDockerInfoService_GetDockerInfo_Call struct {
	*mock.Call
}

// GetDockerInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDockerInfoService_Expecter) GetDockerInfo(ctx interface{}) *MockDockerInfoService_GetDockerInfo_Call {
	return &MockDockerInfoService_GetDockerInfo_Call{Call: _e.mock.On("GetDockerInfo", ctx)}
}

func (_c *MockDockerInfoService_GetDockerInfo_Call) Run(run func(ctx context.Context)) *MockDockerInfoService_GetDockerInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDockerInfoService_GetDockerInfo_Call) Return(dockerInfo *shared.DockerInfo, err error) *MockDockerInfoService_GetDockerInfo_Call {
	_c.Call.Return(dockerInfo, err)
	return _c
}

func (_c *MockDockerInfoService_GetDockerInfo_Call) RunAndReturn(run func(ctx context.Context) (*shared.DockerInfo, error)) *MockDockerInfoService_GetDockerInfo_Call {
	_c.Call.Return(run)
	return _c
}
