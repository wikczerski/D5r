// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/whaletui/internal/shared"
)

// NewMockNetworkService creates a new instance of MockNetworkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockNetworkService {
	mock := &MockNetworkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNetworkService is an autogenerated mock type for the NetworkService type
type MockNetworkService struct {
	mock.Mock
}

type MockNetworkService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkService) EXPECT() *MockNetworkService_Expecter {
	return &MockNetworkService_Expecter{mock: &_m.Mock}
}

// GetActions provides a mock function for the type MockNetworkService
func (_mock *MockNetworkService) GetActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockNetworkService_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type MockNetworkService_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
func (_e *MockNetworkService_Expecter) GetActions() *MockNetworkService_GetActions_Call {
	return &MockNetworkService_GetActions_Call{Call: _e.mock.On("GetActions")}
}

func (_c *MockNetworkService_GetActions_Call) Run(run func()) *MockNetworkService_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkService_GetActions_Call) Return(runeToString map[rune]string) *MockNetworkService_GetActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockNetworkService_GetActions_Call) RunAndReturn(run func() map[rune]string) *MockNetworkService_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionsString provides a mock function for the type MockNetworkService
func (_mock *MockNetworkService) GetActionsString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActionsString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockNetworkService_GetActionsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionsString'
type MockNetworkService_GetActionsString_Call struct {
	*mock.Call
}

// GetActionsString is a helper method to define mock.On call
func (_e *MockNetworkService_Expecter) GetActionsString() *MockNetworkService_GetActionsString_Call {
	return &MockNetworkService_GetActionsString_Call{Call: _e.mock.On("GetActionsString")}
}

func (_c *MockNetworkService_GetActionsString_Call) Run(run func()) *MockNetworkService_GetActionsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkService_GetActionsString_Call) Return(s string) *MockNetworkService_GetActionsString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockNetworkService_GetActionsString_Call) RunAndReturn(run func() string) *MockNetworkService_GetActionsString_Call {
	_c.Call.Return(run)
	return _c
}

// InspectNetwork provides a mock function for the type MockNetworkService
func (_mock *MockNetworkService) InspectNetwork(ctx context.Context, id string) (map[string]any, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for InspectNetwork")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]any, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]any); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNetworkService_InspectNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InspectNetwork'
type MockNetworkService_InspectNetwork_Call struct {
	*mock.Call
}

// InspectNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNetworkService_Expecter) InspectNetwork(ctx interface{}, id interface{}) *MockNetworkService_InspectNetwork_Call {
	return &MockNetworkService_InspectNetwork_Call{Call: _e.mock.On("InspectNetwork", ctx, id)}
}

func (_c *MockNetworkService_InspectNetwork_Call) Run(run func(ctx context.Context, id string)) *MockNetworkService_InspectNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNetworkService_InspectNetwork_Call) Return(stringToV map[string]any, err error) *MockNetworkService_InspectNetwork_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockNetworkService_InspectNetwork_Call) RunAndReturn(run func(ctx context.Context, id string) (map[string]any, error)) *MockNetworkService_InspectNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworks provides a mock function for the type MockNetworkService
func (_mock *MockNetworkService) ListNetworks(ctx context.Context) ([]shared.Network, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworks")
	}

	var r0 []shared.Network
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]shared.Network, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []shared.Network); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.Network)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNetworkService_ListNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworks'
type MockNetworkService_ListNetworks_Call struct {
	*mock.Call
}

// ListNetworks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNetworkService_Expecter) ListNetworks(ctx interface{}) *MockNetworkService_ListNetworks_Call {
	return &MockNetworkService_ListNetworks_Call{Call: _e.mock.On("ListNetworks", ctx)}
}

func (_c *MockNetworkService_ListNetworks_Call) Run(run func(ctx context.Context)) *MockNetworkService_ListNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNetworkService_ListNetworks_Call) Return(networks []shared.Network, err error) *MockNetworkService_ListNetworks_Call {
	_c.Call.Return(networks, err)
	return _c
}

func (_c *MockNetworkService_ListNetworks_Call) RunAndReturn(run func(ctx context.Context) ([]shared.Network, error)) *MockNetworkService_ListNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNetwork provides a mock function for the type MockNetworkService
func (_mock *MockNetworkService) RemoveNetwork(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNetwork")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetworkService_RemoveNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNetwork'
type MockNetworkService_RemoveNetwork_Call struct {
	*mock.Call
}

// RemoveNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNetworkService_Expecter) RemoveNetwork(ctx interface{}, id interface{}) *MockNetworkService_RemoveNetwork_Call {
	return &MockNetworkService_RemoveNetwork_Call{Call: _e.mock.On("RemoveNetwork", ctx, id)}
}

func (_c *MockNetworkService_RemoveNetwork_Call) Run(run func(ctx context.Context, id string)) *MockNetworkService_RemoveNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNetworkService_RemoveNetwork_Call) Return(err error) *MockNetworkService_RemoveNetwork_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetworkService_RemoveNetwork_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockNetworkService_RemoveNetwork_Call {
	_c.Call.Return(run)
	return _c
}
