// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/rivo/tview"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHeaderManagerInterface creates a new instance of MockHeaderManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeaderManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockHeaderManagerInterface {
	mock := &MockHeaderManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHeaderManagerInterface is an autogenerated mock type for the HeaderManagerInterface type
type MockHeaderManagerInterface struct {
	mock.Mock
}

type MockHeaderManagerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeaderManagerInterface) EXPECT() *MockHeaderManagerInterface_Expecter {
	return &MockHeaderManagerInterface_Expecter{mock: &_m.Mock}
}

// CreateHeaderSection provides a mock function for the type MockHeaderManagerInterface
func (_mock *MockHeaderManagerInterface) CreateHeaderSection() tview.Primitive {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateHeaderSection")
	}

	var r0 tview.Primitive
	if returnFunc, ok := ret.Get(0).(func() tview.Primitive); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tview.Primitive)
		}
	}
	return r0
}

// MockHeaderManagerInterface_CreateHeaderSection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHeaderSection'
type MockHeaderManagerInterface_CreateHeaderSection_Call struct {
	*mock.Call
}

// CreateHeaderSection is a helper method to define mock.On call
func (_e *MockHeaderManagerInterface_Expecter) CreateHeaderSection() *MockHeaderManagerInterface_CreateHeaderSection_Call {
	return &MockHeaderManagerInterface_CreateHeaderSection_Call{Call: _e.mock.On("CreateHeaderSection")}
}

func (_c *MockHeaderManagerInterface_CreateHeaderSection_Call) Run(run func()) *MockHeaderManagerInterface_CreateHeaderSection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderManagerInterface_CreateHeaderSection_Call) Return(primitive tview.Primitive) *MockHeaderManagerInterface_CreateHeaderSection_Call {
	_c.Call.Return(primitive)
	return _c
}

func (_c *MockHeaderManagerInterface_CreateHeaderSection_Call) RunAndReturn(run func() tview.Primitive) *MockHeaderManagerInterface_CreateHeaderSection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateActions provides a mock function for the type MockHeaderManagerInterface
func (_mock *MockHeaderManagerInterface) UpdateActions() {
	_mock.Called()
	return
}

// MockHeaderManagerInterface_UpdateActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateActions'
type MockHeaderManagerInterface_UpdateActions_Call struct {
	*mock.Call
}

// UpdateActions is a helper method to define mock.On call
func (_e *MockHeaderManagerInterface_Expecter) UpdateActions() *MockHeaderManagerInterface_UpdateActions_Call {
	return &MockHeaderManagerInterface_UpdateActions_Call{Call: _e.mock.On("UpdateActions")}
}

func (_c *MockHeaderManagerInterface_UpdateActions_Call) Run(run func()) *MockHeaderManagerInterface_UpdateActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderManagerInterface_UpdateActions_Call) Return() *MockHeaderManagerInterface_UpdateActions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHeaderManagerInterface_UpdateActions_Call) RunAndReturn(run func()) *MockHeaderManagerInterface_UpdateActions_Call {
	_c.Run(run)
	return _c
}

// UpdateDockerInfo provides a mock function for the type MockHeaderManagerInterface
func (_mock *MockHeaderManagerInterface) UpdateDockerInfo() {
	_mock.Called()
	return
}

// MockHeaderManagerInterface_UpdateDockerInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDockerInfo'
type MockHeaderManagerInterface_UpdateDockerInfo_Call struct {
	*mock.Call
}

// UpdateDockerInfo is a helper method to define mock.On call
func (_e *MockHeaderManagerInterface_Expecter) UpdateDockerInfo() *MockHeaderManagerInterface_UpdateDockerInfo_Call {
	return &MockHeaderManagerInterface_UpdateDockerInfo_Call{Call: _e.mock.On("UpdateDockerInfo")}
}

func (_c *MockHeaderManagerInterface_UpdateDockerInfo_Call) Run(run func()) *MockHeaderManagerInterface_UpdateDockerInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderManagerInterface_UpdateDockerInfo_Call) Return() *MockHeaderManagerInterface_UpdateDockerInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHeaderManagerInterface_UpdateDockerInfo_Call) RunAndReturn(run func()) *MockHeaderManagerInterface_UpdateDockerInfo_Call {
	_c.Run(run)
	return _c
}

// UpdateNavigation provides a mock function for the type MockHeaderManagerInterface
func (_mock *MockHeaderManagerInterface) UpdateNavigation() {
	_mock.Called()
	return
}

// MockHeaderManagerInterface_UpdateNavigation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNavigation'
type MockHeaderManagerInterface_UpdateNavigation_Call struct {
	*mock.Call
}

// UpdateNavigation is a helper method to define mock.On call
func (_e *MockHeaderManagerInterface_Expecter) UpdateNavigation() *MockHeaderManagerInterface_UpdateNavigation_Call {
	return &MockHeaderManagerInterface_UpdateNavigation_Call{Call: _e.mock.On("UpdateNavigation")}
}

func (_c *MockHeaderManagerInterface_UpdateNavigation_Call) Run(run func()) *MockHeaderManagerInterface_UpdateNavigation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderManagerInterface_UpdateNavigation_Call) Return() *MockHeaderManagerInterface_UpdateNavigation_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHeaderManagerInterface_UpdateNavigation_Call) RunAndReturn(run func()) *MockHeaderManagerInterface_UpdateNavigation_Call {
	_c.Run(run)
	return _c
}
