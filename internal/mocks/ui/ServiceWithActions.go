// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceWithActions creates a new instance of MockServiceWithActions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceWithActions(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockServiceWithActions {
	mock := &MockServiceWithActions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceWithActions is an autogenerated mock type for the ServiceWithActions type
type MockServiceWithActions struct {
	mock.Mock
}

type MockServiceWithActions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceWithActions) EXPECT() *MockServiceWithActions_Expecter {
	return &MockServiceWithActions_Expecter{mock: &_m.Mock}
}

// GetActions provides a mock function for the type MockServiceWithActions
func (_mock *MockServiceWithActions) GetActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockServiceWithActions_GetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActions'
type MockServiceWithActions_GetActions_Call struct {
	*mock.Call
}

// GetActions is a helper method to define mock.On call
func (_e *MockServiceWithActions_Expecter) GetActions() *MockServiceWithActions_GetActions_Call {
	return &MockServiceWithActions_GetActions_Call{Call: _e.mock.On("GetActions")}
}

func (_c *MockServiceWithActions_GetActions_Call) Run(run func()) *MockServiceWithActions_GetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceWithActions_GetActions_Call) Return(runeToString map[rune]string) *MockServiceWithActions_GetActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockServiceWithActions_GetActions_Call) RunAndReturn(run func() map[rune]string) *MockServiceWithActions_GetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionsString provides a mock function for the type MockServiceWithActions
func (_mock *MockServiceWithActions) GetActionsString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActionsString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockServiceWithActions_GetActionsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionsString'
type MockServiceWithActions_GetActionsString_Call struct {
	*mock.Call
}

// GetActionsString is a helper method to define mock.On call
func (_e *MockServiceWithActions_Expecter) GetActionsString() *MockServiceWithActions_GetActionsString_Call {
	return &MockServiceWithActions_GetActionsString_Call{Call: _e.mock.On("GetActionsString")}
}

func (_c *MockServiceWithActions_GetActionsString_Call) Run(run func()) *MockServiceWithActions_GetActionsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceWithActions_GetActionsString_Call) Return(s string) *MockServiceWithActions_GetActionsString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockServiceWithActions_GetActionsString_Call) RunAndReturn(run func() string) *MockServiceWithActions_GetActionsString_Call {
	_c.Call.Return(run)
	return _c
}
