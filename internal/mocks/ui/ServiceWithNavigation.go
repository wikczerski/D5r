// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceWithNavigation creates a new instance of MockServiceWithNavigation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceWithNavigation(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockServiceWithNavigation {
	mock := &MockServiceWithNavigation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceWithNavigation is an autogenerated mock type for the ServiceWithNavigation type
type MockServiceWithNavigation struct {
	mock.Mock
}

type MockServiceWithNavigation_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceWithNavigation) EXPECT() *MockServiceWithNavigation_Expecter {
	return &MockServiceWithNavigation_Expecter{mock: &_m.Mock}
}

// GetNavigation provides a mock function for the type MockServiceWithNavigation
func (_mock *MockServiceWithNavigation) GetNavigation() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNavigation")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockServiceWithNavigation_GetNavigation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNavigation'
type MockServiceWithNavigation_GetNavigation_Call struct {
	*mock.Call
}

// GetNavigation is a helper method to define mock.On call
func (_e *MockServiceWithNavigation_Expecter) GetNavigation() *MockServiceWithNavigation_GetNavigation_Call {
	return &MockServiceWithNavigation_GetNavigation_Call{Call: _e.mock.On("GetNavigation")}
}

func (_c *MockServiceWithNavigation_GetNavigation_Call) Run(run func()) *MockServiceWithNavigation_GetNavigation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceWithNavigation_GetNavigation_Call) Return(runeToString map[rune]string) *MockServiceWithNavigation_GetNavigation_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockServiceWithNavigation_GetNavigation_Call) RunAndReturn(run func() map[rune]string) *MockServiceWithNavigation_GetNavigation_Call {
	_c.Call.Return(run)
	return _c
}

// GetNavigationString provides a mock function for the type MockServiceWithNavigation
func (_mock *MockServiceWithNavigation) GetNavigationString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNavigationString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockServiceWithNavigation_GetNavigationString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNavigationString'
type MockServiceWithNavigation_GetNavigationString_Call struct {
	*mock.Call
}

// GetNavigationString is a helper method to define mock.On call
func (_e *MockServiceWithNavigation_Expecter) GetNavigationString() *MockServiceWithNavigation_GetNavigationString_Call {
	return &MockServiceWithNavigation_GetNavigationString_Call{Call: _e.mock.On("GetNavigationString")}
}

func (_c *MockServiceWithNavigation_GetNavigationString_Call) Run(run func()) *MockServiceWithNavigation_GetNavigationString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceWithNavigation_GetNavigationString_Call) Return(s string) *MockServiceWithNavigation_GetNavigationString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockServiceWithNavigation_GetNavigationString_Call) RunAndReturn(run func() string) *MockServiceWithNavigation_GetNavigationString_Call {
	_c.Call.Return(run)
	return _c
}
